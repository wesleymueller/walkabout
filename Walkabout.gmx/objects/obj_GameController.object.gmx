<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

global.time = 1;
global.paused = 0;
global.debug = 0;

global.jumpTime = 300;
global.copSpawned = 0;

global.paused = 0;
global.barf = 0;
global.barfTimerMax = room_speed * 1.5;
global.barfTimer = 0;
global.interacting = 0;
global.interactionTimer = 0;

global.interactionText = "";

global.maxCoolDown = 300;
global.teleportCooldown = 300;

cameraAccel = 0.12
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Player Variables

pad_haxis = 0;
hsp = 0;
hdir = 0;
moveSpeed = 0;
maxSpeed = sprite_get_width(spr_PlayerStanding) / 6;
left = 0;
right = 0;
playerAccel = 5;

global.playerx = 600;
global.playery = room_height - (sprite_get_height(spr_PlayerStanding) / 2) - 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start Room

if !global.startRoom {
    global.startRoom = 1;
    global.barf = 1;
    global.barfTimer = global.barfTimerMax;
    instance_create(global.playerx, global.playery, obj_player);
    obj_player.sprite_index = spr_PlayerBarf;
    view_xview[0] = (obj_player.x - (view_wview[0] / 2) - view_xview[0]);
    view_xview[0] = clamp(view_xview[0], 0, room_width - view_wview[0]);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Turn on Debug

if keyboard_check_pressed(vk_f12) {
    if (global.debug == 1) {
        global.debug = 0;
    } else {
        global.debug = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for input

check_haxis = gamepad_axis_value(0, gp_axislh);
check_key_left = -keyboard_check(vk_left);
check_key_right = keyboard_check(vk_right);
check_pad_left = -gamepad_button_check(0, gp_padl);
check_pad_right = gamepad_button_check(0, gp_padr);


if !global.paused {
    if (check_haxis &gt; 0.1) {
        pad_haxis = 1;
    } 
    if (check_haxis &lt; -0.1) {
        pad_haxis = -1;
    }
    if (-0.1 &lt; check_haxis) &amp;&amp;  (check_haxis &lt; 0.1) {
        pad_haxis = 0;
    }
    
    hdir = (check_pad_left + check_pad_right) + (check_key_left + check_key_right) + (pad_haxis)
    if hdir &gt; 0 { hdir = 1;}
    if hdir &lt; 0 { hdir = -1;}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move player
if !global.paused &amp;&amp; !global.barf {

    if (hdir != 0) {
        moveSpeed += playerAccel * hdir
        moveSpeed = clamp(moveSpeed, -maxSpeed, maxSpeed);
    }
    
    if (hdir == 0) {
        moveSpeed -= playerAccel * sign(moveSpeed);
    }
    
    obj_player.x += moveSpeed;
    global.playerx = obj_player.x;
    
    obj_player.x = clamp(obj_player.x, (obj_player.sprite_width / 2) + 100, room_width - (obj_player.sprite_width / 2) - 100)

}

if global.barf {
    moveSpeed = 0;
}  
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set sprite

if !global.paused &amp;&amp; !global.barf {
    if (hdir &lt; 0) {
        obj_player.sprite_index = spr_PlayerLeft;
    }
    
    if (hdir &gt; 0) {
        obj_player.sprite_index = spr_PlayerRight;
    }
    
    if (hdir == 0) {
        obj_player.sprite_index = spr_PlayerStanding;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Time Travel

gp_Past = gamepad_button_check_pressed(0, gp_face2);
gp_Future = gamepad_button_check_pressed(0, gp_face3);
key_Past = keyboard_check_pressed(ord('X'));
key_Future = keyboard_check_pressed(ord('C'));

if !global.paused {
    if (global.teleportCooldown == 0) {
        if (gp_Past || key_Past) {
            switch (room) {
                case rm_graybox:    
                    global.teleportCooldown = global.maxCoolDown;
                    room_goto(rm_graybox_past);
                    break;
                case rm_graybox_past: 
                    break;
            }
        }
        
        if (gp_Future || key_Future) {
            switch (room) {
                case rm_graybox:    
                    break;
                case rm_graybox_past: 
                    global.teleportCooldown = global.maxCoolDown;
                    room_goto(rm_graybox);
                    break;
            }
        }
    } else {
        global.teleportCooldown--;
        if global.teleportCooldown &lt; 0 {
            global.teleportCooldown = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Time Cop Jump Timer

if (global.paused == 0) &amp;&amp; (global.jumpTime &gt; 0) {
    global.jumpTime--;
    if (global.jumpTime &lt;= 0) &amp;&amp; (global.copSpawned == 0) {
        global.copSpawned = 1;
        instance_create(obj_copSpawn.x, obj_copSpawn.y, obj_TimeCop);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera Follow

view_xview[0] += ((obj_player.x - (view_wview[0] / 2) - view_xview[0]) * cameraAccel);
view_xview[0] = clamp(view_xview[0], 0, room_width - view_wview[0]);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Barf

if (global.barfTimer &gt; 0) {
    global.barfTimer--
    global.barfTimer = clamp(global.barfTimer, 0, global.barfTimerMax);
    if (global.barfTimer &lt;= 0) {
        global.barf = 0;
        obj_player.sprite_index = spr_PlayerStanding;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug

if (global.debug) {
    draw_set_halign(fa_left);
    draw_text(16, 16, "hdir: " + string(hdir));
    draw_text(16, 16 * 2, "haxis: " + string(gamepad_axis_value(0, gp_axislh)));
    draw_text(16, 16 * 3, "hsp: " + string(hsp));
    draw_text(16, 16 * 4, "Spawn Timer: " + string(global.jumpTime));
    draw_text(16, 16 * 5, "Interaction Timer: " + string(global.interactionTimer));
    draw_text(16, 16 * 6, "Teleport Cooldown: " + string(global.teleportCooldown));
    draw_text(16, 16 * 7, "Move Speed: " + string(moveSpeed));
    draw_text(16, 16 * 9, "Room: " + string(room));
    
    draw_set_halign(fa_right);
    draw_text(view_wview - 16, 16, "Interact Gamepad: " + string(obj_interactable.gpInteract));
    draw_text(view_wview - 16, 16 * 2, "Interact Keyboard: " + string(obj_interactable.keyInteract));
    draw_text(view_wview - 16, 16 * 3, "Past Gamepad: " + string(gp_Past));
    draw_text(view_wview - 16, 16 * 4, "Past Keyboard: " + string(key_Past));
    draw_text(view_wview - 16, 16 * 5, "Future Gamepad: " + string(gp_Future));
    draw_text(view_wview - 16, 16 * 6, "Future Keyboard: " + string(key_Future));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Interaction

if global.paused &amp;&amp; global.interacting {
    draw_text(room_width / 2, 36, global.interactionText);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
